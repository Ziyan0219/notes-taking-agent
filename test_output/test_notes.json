{
  "title": "线性代数基础",
  "source_file": "test.pdf",
  "concepts": [
    {
      "name": "矩阵",
      "importance": "线性代数的基础数据结构，用于表示线性变换",
      "core_idea": "数字的矩形阵列，可以进行特定的数学运算",
      "when_to_use": "线性变换、方程组求解、数据处理"
    },
    {
      "name": "行列式",
      "importance": "衡量矩阵的'大小'，判断矩阵可逆性",
      "core_idea": "矩阵的一个标量属性",
      "when_to_use": "判断矩阵可逆、计算体积变化、求解线性方程组"
    }
  ],
  "formulas": [
    {
      "name": "2×2矩阵行列式",
      "latex": "\\det(A) = \\begin{vmatrix} a & b \\\\ c & d \\end{vmatrix} = ad - bc",
      "variables": {
        "a,b,c,d": "矩阵元素",
        "det(A)": "矩阵A的行列式"
      },
      "use_cases": [
        "判断2×2矩阵可逆性",
        "计算面积变化"
      ],
      "variations": [
        "|A| = ad - bc"
      ]
    },
    {
      "name": "矩阵乘法",
      "latex": "(AB)_{ij} = \\sum_{k=1}^{n} A_{ik}B_{kj}",
      "variables": {
        "A,B": "矩阵",
        "i,j": "行列索引",
        "n": "矩阵维数"
      },
      "use_cases": [
        "线性变换复合",
        "方程组求解"
      ],
      "variations": [
        "C = AB"
      ]
    }
  ],
  "examples": [
    {
      "concept": "行列式计算",
      "problem": "计算矩阵 A = [[2,3],[1,4]] 的行列式",
      "solution_steps": [
        "使用2×2行列式公式: det(A) = ad - bc",
        "识别矩阵元素: a=2, b=3, c=1, d=4",
        "代入公式: det(A) = 2×4 - 3×1",
        "计算结果: det(A) = 8 - 3 = 5"
      ],
      "key_insight": "2×2行列式就是主对角线乘积减去副对角线乘积",
      "common_mistakes": [
        "符号搞错",
        "元素位置混淆"
      ]
    },
    {
      "concept": "矩阵乘法",
      "problem": "计算 [[1,2],[3,4]] × [[2,0],[1,3]]",
      "solution_steps": [
        "使用矩阵乘法定义 (AB)ij = Σ(Aik × Bkj)",
        "计算(1,1)位置: 1×2 + 2×1 = 4",
        "计算(1,2)位置: 1×0 + 2×3 = 6",
        "计算(2,1)位置: 3×2 + 4×1 = 10",
        "计算(2,2)位置: 3×0 + 4×3 = 12",
        "结果矩阵: [[4,6],[10,12]]"
      ],
      "key_insight": "矩阵乘法是行×列的内积运算",
      "common_mistakes": [
        "维度不匹配",
        "计算顺序错误",
        "内积计算错误"
      ]
    }
  ],
  "practical_tips": [
    "做题前先检查矩阵维度是否匹配",
    "行列式计算要注意正负号",
    "矩阵乘法不满足交换律，注意顺序",
    "复杂计算可以分步进行，避免一步到位"
  ],
  "metadata": {
    "generation_method": "test_data",
    "focus": "problem_solving",
    "difficulty_level": "undergraduate"
  },
  "processing_info": {
    "success": true,
    "method": "test",
    "quality": "high"
  }
}